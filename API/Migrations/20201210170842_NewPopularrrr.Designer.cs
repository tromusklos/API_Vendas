// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201210170842_NewPopularrrr")]
    partial class NewPopularrrr
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("API.Models.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Documento")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Senha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DataCadastro = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Documento = "88.888.888-44",
                            Email = "joao@joao.com",
                            Nome = "João Paulo",
                            Senha = "FC791BD5779D9D076129FD56584B3392"
                        },
                        new
                        {
                            Id = 2L,
                            DataCadastro = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Documento = "77.858.458-96",
                            Email = "camila@camila.com",
                            Nome = "Camila Santos",
                            Senha = "9403ADBD654AE140BB27A8036FC64196"
                        });
                });

            modelBuilder.Entity("API.Models.Fornecedor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Cnpj")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cnpj = "81.191.124/0001-01",
                            Nome = "João do Gás"
                        },
                        new
                        {
                            Id = 2L,
                            Cnpj = "88.857.444/0001-01",
                            Nome = "Amazon"
                        });
                });

            modelBuilder.Entity("API.Models.Produto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Categoria")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CodigoProduto")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("FornecedorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Imagem")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Promocao")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("Quantidade")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("ValorPromo")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Categoria = "Eletronicos",
                            CodigoProduto = "548",
                            FornecedorId = 2L,
                            Imagem = "echodot.jpg",
                            Nome = "Echo dot",
                            Promocao = true,
                            Quantidade = 100L,
                            Valor = 199m,
                            ValorPromo = 150m
                        },
                        new
                        {
                            Id = 2L,
                            Categoria = "Gás",
                            CodigoProduto = "4487",
                            FornecedorId = 1L,
                            Imagem = "gas.jpg",
                            Nome = "Gás",
                            Promocao = false,
                            Quantidade = 150L,
                            Valor = 70m,
                            ValorPromo = 20m
                        },
                        new
                        {
                            Id = 3L,
                            Categoria = "Celulares",
                            CodigoProduto = "874",
                            FornecedorId = 2L,
                            Imagem = "sansung.jpg",
                            Nome = "Smartphone",
                            Promocao = true,
                            Quantidade = 30L,
                            Valor = 1699m,
                            ValorPromo = 99m
                        },
                        new
                        {
                            Id = 4L,
                            Categoria = "Gás",
                            CodigoProduto = "045",
                            FornecedorId = 1L,
                            Imagem = "gasp45.jpg",
                            Nome = "GásP45",
                            Promocao = false,
                            Quantidade = 50L,
                            Valor = 150m,
                            ValorPromo = 20m
                        });
                });

            modelBuilder.Entity("API.Models.Venda", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataCompra")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FornecedorId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalCompra")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FornecedorId");

                    b.ToTable("Vendas");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClienteId = 1L,
                            DataCompra = new DateTime(2020, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FornecedorId = 1L,
                            TotalCompra = 16m
                        });
                });

            modelBuilder.Entity("API.Models.VendaProduto", b =>
                {
                    b.Property<long>("produtoId")
                        .HasColumnType("bigint");

                    b.Property<long>("VendaId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalProduto")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("produtoId", "VendaId");

                    b.HasIndex("VendaId");

                    b.ToTable("VendaProdutos");

                    b.HasData(
                        new
                        {
                            produtoId = 1L,
                            VendaId = 1L,
                            TotalProduto = 12m
                        },
                        new
                        {
                            produtoId = 3L,
                            VendaId = 1L,
                            TotalProduto = 4m
                        });
                });

            modelBuilder.Entity("API.Models.Produto", b =>
                {
                    b.HasOne("API.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Venda", b =>
                {
                    b.HasOne("API.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.VendaProduto", b =>
                {
                    b.HasOne("API.Models.Venda", "Venda")
                        .WithMany()
                        .HasForeignKey("VendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("produtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
